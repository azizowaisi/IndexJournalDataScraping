#!/bin/bash

# Index Journals Data Scraping - Deployment Script
# Usage: ./scripts/deploy [local|prod] [region]

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_DIR="$(dirname "$SCRIPT_DIR")"

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Show usage
show_usage() {
    echo "Usage: $0 [local|prod] [region]"
    echo ""
    echo "Arguments:"
    echo "  stage   - Deployment stage: local or prod"
    echo "  region  - AWS region (optional, defaults to us-east-1)"
    echo ""
    echo "Examples:"
    echo "  $0 local us-east-1"
    echo "  $0 prod us-west-2"
    echo "  $0 local"
    echo ""
    echo "Available stages:"
    echo "  local   - Development environment"
    echo "  prod    - Production environment"
}

# Check if stage is provided
if [ $# -lt 1 ]; then
    log_error "Stage is required"
    show_usage
    exit 1
fi

STAGE="$1"
REGION="${2:-us-east-1}"

# Validate stage
if [[ "$STAGE" != "local" && "$STAGE" != "prod" ]]; then
    log_error "Invalid stage: $STAGE. Valid stages are: local, prod"
    show_usage
    exit 1
fi

log_info "Starting deployment for stage: $STAGE in region: $REGION"

# Load environment configuration
load_environment_config() {
    log_info "Loading environment configuration for stage: $STAGE"
    
    # Check if environment file exists
    ENV_FILE="$PROJECT_DIR/config/env.$STAGE"
    if [ ! -f "$ENV_FILE" ]; then
        log_error "Environment file not found: $ENV_FILE"
        log_info "Available environment files:"
        ls -la "$PROJECT_DIR/config"/env.* 2>/dev/null || log_warning "No environment files found"
        exit 1
    fi
    
    # Load environment variables from file
    log_info "Loading environment from: $ENV_FILE"
    set -a
    source "$ENV_FILE"
    set +a
    
    # Get AWS Account ID from credentials
    export AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)
    log_info "AWS Account ID: $AWS_ACCOUNT_ID"
    
    # Use ARNs from environment file if they exist, otherwise generate them
    if [ -z "$SQS_SCRAPING_QUEUE_ARN" ]; then
        export SQS_SCRAPING_QUEUE_ARN="arn:aws:sqs:$AWS_REGION:$AWS_ACCOUNT_ID:journal-scraping-queue-$STAGE"
    fi
    if [ -z "$SQS_INTEGRATION_QUEUE_ARN" ]; then
        export SQS_INTEGRATION_QUEUE_ARN="arn:aws:sqs:$AWS_REGION:$AWS_ACCOUNT_ID:journal-integration-queue-$STAGE"
    fi
    
    log_success "Environment configuration loaded for $STAGE"
    log_info "S3 Bucket: $S3_BUCKET_NAME"
    log_info "Scraping Queue ARN: $SQS_SCRAPING_QUEUE_ARN"
    log_info "Integration Queue ARN: $SQS_INTEGRATION_QUEUE_ARN"
}

# Check prerequisites
check_prerequisites() {
    log_info "Checking prerequisites..."
    
    # Check AWS CLI
    if ! command -v aws &> /dev/null; then
        log_error "AWS CLI is not installed"
        exit 1
    fi
    
    # Check Node.js
    if ! command -v node &> /dev/null; then
        log_error "Node.js is not installed"
        exit 1
    fi
    
    # Check Node.js version
    NODE_VERSION=$(node --version | cut -d'v' -f2 | cut -d'.' -f1)
    if [ "$NODE_VERSION" -lt 22 ]; then
        log_error "Node.js version 22.x or later is required. Current version: $(node --version)"
        exit 1
    fi
    
    # Check npm
    if ! command -v npm &> /dev/null; then
        log_error "npm is not installed"
        exit 1
    fi
    
    # Check Serverless Framework
    if ! command -v serverless &> /dev/null; then
        log_error "Serverless Framework is not installed"
        exit 1
    fi
    
    # Check AWS credentials
    if ! aws sts get-caller-identity &> /dev/null; then
        log_error "AWS credentials not configured"
        exit 1
    fi
    
    log_success "All prerequisites met"
}

# Build the project
build_project() {
    log_info "Installing Node.js dependencies..."
    cd "$PROJECT_DIR"
    
    if [ ! -f "package.json" ]; then
        log_error "package.json not found in project directory"
        exit 1
    fi
    
    # Install all dependencies for testing
    if npm install; then
        log_success "Dependencies installed successfully"
    else
        log_error "Failed to install dependencies"
        exit 1
    fi
    
    # Run tests if available (before removing dev dependencies)
    if [ -f "package.json" ] && grep -q '"test"' package.json; then
        log_info "Running tests with coverage..."
        if npm run test:ci; then
            log_success "All tests passed with coverage"
        else
            log_error "Tests failed! Deployment aborted."
            log_info "Run 'npm test' locally to see test details"
            exit 1
        fi
    else
        log_info "No tests configured, skipping..."
    fi
    
    # Clean install production dependencies only for deployment
    log_info "Preparing production dependencies..."
    if npm ci --omit=dev; then
        log_success "Production dependencies prepared"
    else
        log_error "Failed to prepare production dependencies"
        exit 1
    fi
}

# Deploy with Serverless Framework
deploy_with_serverless() {
    log_info "Deploying with Serverless Framework..."
    
    cd "$PROJECT_DIR"
    
    # Login to Serverless Framework if access key is provided
    if [ -n "$SERVERLESS_ACCESS_KEY" ]; then
        log_info "Authenticating with Serverless Framework..."
        echo "$SERVERLESS_ACCESS_KEY" | serverless login --key
    fi
    
    if serverless deploy --stage "$STAGE" --region "$REGION"; then
        log_success "Deployment completed successfully"
    else
        log_error "Deployment failed"
        exit 1
    fi
}

# Show deployment summary
show_summary() {
    log_success "Deployment Summary"
    echo "==================="
    echo "Stage: $STAGE"
    echo "Region: $REGION"
    echo "S3 Bucket: $S3_BUCKET_NAME"
    echo "Function Name: index-journals-data-scraping-$STAGE-scraping"
    echo "Scraping Queue ARN: $SQS_SCRAPING_QUEUE_ARN"
    echo "Integration Queue ARN: $SQS_INTEGRATION_QUEUE_ARN"
    echo ""
    log_info "To check function status:"
    echo "aws lambda get-function --function-name index-journals-data-scraping-$STAGE-scraping"
    echo ""
    log_info "To view logs:"
    echo "aws logs tail /aws/lambda/index-journals-data-scraping-$STAGE-scraping --follow"
}

# Main deployment flow
main() {
    load_environment_config
    check_prerequisites
    build_project
    deploy_with_serverless
    show_summary
}

# Run main function
main