#!/bin/bash

# Clean build artifacts script
# Removes serverless build artifacts and node_modules for fresh builds

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging functions
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Get project directory
PROJECT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")/.." && pwd)"
cd "$PROJECT_DIR"

log_info "Cleaning build artifacts in: $PROJECT_DIR"

# Clean serverless build artifacts
if [ -d ".serverless" ]; then
    log_info "Removing .serverless directory..."
    rm -rf .serverless
    log_success "Removed .serverless directory"
else
    log_info ".serverless directory not found (already clean)"
fi

# Clean node_modules (optional)
if [ "$1" = "--all" ] || [ "$1" = "-a" ]; then
    if [ -d "node_modules" ]; then
        log_info "Removing node_modules directory..."
        rm -rf node_modules
        log_success "Removed node_modules directory"
    else
        log_info "node_modules directory not found (already clean)"
    fi
    
    if [ -f "package-lock.json" ]; then
        log_info "Removing package-lock.json..."
        rm -f package-lock.json
        log_success "Removed package-lock.json"
    fi
else
    log_info "To also clean node_modules, run: $0 --all"
fi

# Clean other temporary files
log_info "Cleaning temporary files..."
find . -name "*.log" -type f -delete 2>/dev/null || true
find . -name "*.tmp" -type f -delete 2>/dev/null || true
find . -name ".DS_Store" -type f -delete 2>/dev/null || true

log_success "Clean completed successfully!"

# Show next steps
echo ""
log_info "Next steps:"
echo "  1. Install dependencies: npm install"
echo "  2. Run tests: npm test"
echo "  3. Deploy: ./scripts/deploy prod"
