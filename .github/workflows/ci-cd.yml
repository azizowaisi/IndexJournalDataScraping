name: CI/CD - Journal Index Data Scraping

on:
  push:
    branches: [master]   # Deploy when master branch is updated (including PR merges)
  pull_request:
    types: [closed]
    branches: [master]   # Also trigger when PR is closed (merged or closed)

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    # Only run if this is a push to master OR a merged PR to master
    if: github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.merged == true)

    steps:
      # 1. Checkout repo
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. Set up Node.js 22
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      # 3. Install dependencies
      - name: Install dependencies
        run: npm ci

      # 4. Run tests
      - name: Run tests
        run: npm test

      # 5. Build application
      - name: Build application
        run: npm run build

      # 6. Install Serverless Framework v4
      - name: Install Serverless Framework v4
        run: npm install -g serverless@4

      # 7. Deploy using Serverless Framework with authentication
      - name: Deploy to AWS
        env:
          SERVERLESS_ACCESS_KEY: ${{ secrets.SERVERLESS_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          # S3 Configuration
          S3_BUCKET_NAME: ${{ secrets.S3_BUCKET_NAME }}
          S3_DEPLOYMENT_BUCKET: ${{ secrets.S3_DEPLOYMENT_BUCKET }}
          # SQS Configuration
          SQS_SCRAPING_QUEUE_URL: ${{ secrets.SQS_SCRAPING_QUEUE_URL }}
          SQS_SCRAPING_QUEUE_ARN: ${{ secrets.SQS_SCRAPING_QUEUE_ARN }}
          SQS_INTEGRATION_QUEUE_URL: ${{ secrets.SQS_INTEGRATION_QUEUE_URL }}
          SQS_INTEGRATION_QUEUE_ARN: ${{ secrets.SQS_INTEGRATION_QUEUE_ARN }}
        run: |
          echo "$SERVERLESS_ACCESS_KEY" | serverless login --key
          sls deploy --stage prod --region $AWS_REGION
